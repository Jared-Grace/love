{
 "aliases": {
  "a": "function_alias_add",
  "c": "function_copy",
  "n": "function_new",
  "ts": "function_types",
  "tf": "function_type_first",
  "o": "function_open",
  "s": "functions_search",
  "ac": "function_alias_change",
  "al": "function_aliases",
  "ni": "npm_install",
  "i": "function_imports_missing_add",
  "fa": "functions_format",
  "v": "server",
  "m": "marker_top",
  "mr": "marker_remove",
  "md": "marker_down",
  "ma": "marker_assign_replace",
  "mc": "marker_call",
  "u": "function_name_unalias",
  "ft": "function_transform",
  "fm": "function_format",
  "f": "data_function_current_get",
  "fs": "function_current_set",
  "ai": "function_aliases_inverted",
  "np": "noop",
  "ps": "data_prompts",
  "p": "prompt_previous",
  "pn": "function_param_new",
  "ad": "function_alias_delete",
  "ar": "function_alias_replace",
  "fd": "function_dependencies_code_copy",
  "de": "function_delete",
  "ir": "function_identifier_replace",
  "au": "function_auto",
  "fw": "function_wrap",
  "sb": "sandbox",
  "psn": "function_params_new",
  "irs": "function_identifier_replace_suffix_add",
  "ftc": "function_transform_command",
  "mcr": "marker_call_replace",
  "mnd": "marker_next_delete",
  "fts": "function_transform_command_self",
  "ire": "function_identifier_replace_ending_remove",
  "mx": "marker_expand",
  "mn": "marker_new",
  "mca": "marker_call_atomize",
  "ms": "marker_current_set",
  "as": "function_aliases_search",
  "mg": "data_marker_current_get",
  "mm": "marker_move",
  "mf": "marker_functionize",
  "w": "watch",
  "fws": "function_wrap_suffix_add",
  "nj": "function_new_js",
  "mb": "marker_bottom",
  "na": "function_new_aliased",
  "so": "functions_search_open",
  "t": "task_new",
  "tr": "tasks_run",
  "op": "object_properties",
  "ea": "each_async",
  "tns": "task_new_simple",
  "sei": "string_empty_is",
  "lf": "list_first",
  "ls": "list_second",
  "or": "object_replace",
  "st": "object_property_set",
  "ntn": "js_node_type_not_is",
  "oc": "object_copy",
  "jpe": "js_parse_expression",
  "lg": "list_get",
  "fns": "functions_names",
  "e": "each",
  "l1": "list_get_end_1",
  "lal": "list_all",
  "l2": "list_get_end_2",
  "fnu": "function_name_unalias",
  "lin": "list_includes",
  "li": "list_is",
  "l": "log",
  "at": "assert",
  "ld": "list_adder",
  "la": "list_add",
  "ss": "string_split",
  "ssc": "string_split_comma",
  "fnt": "function_new_transform",
  "jps": "js_parse_statement",
  "fc": "functions_combine",
  "lm": "list_map",
  "lmu": "list_map_unordered_async",
  "lmp": "list_map_property",
  "fst": "function_current_set_task_new",
  "fsp": "function_name_separator",
  "atn": "function_acronym_to_names",
  "cs": "function_copy_suffix_add",
  "er": "error",
  "fsts": "function_current_set_task_new_simple",
  "nt": "js_node_type_is",
  "nti": "js_node_type_is_if",
  "fr": "function_read",
  "": "oe",
  "oe": "function_open_editor",
  "fp": "function_parse_declaration_js_unparse",
  "oec": "function_open_editor_current",
  "cd": "function_current_declaration_code",
  "ars": "marker_assign_replace_string",
  "mdc": "marker_down_choices",
  "lz": "list_size",
  "mrt": "marker_remove_marker_top",
  "fy": "function_types",
  "lk": "list_skip",
  "ll": "list_filter",
  "jnt": "js_node_type",
  "lx": "list_index_of",
  "x": "exit",
  "ini": "integer_is",
  "lu": "log_unparse",
  "ntsi": "js_node_types_is",
  "jv": "js_visit",
  "jvt": "js_visit_type",
  "fcp": "function_copy",
  "r": "function_rename",
  "me": "marker_enter",
  "lr": "list_remove",
  "lis": "list_insert",
  "mab": "marker_above",
  "mda": "marker_delete_above",
  "ja": "js_auto",
  "lax": "list_add_if_not_includes",
  "lj": "list_join",
  "opd": "object_property_delete"
 },
 "prompts": [
  "f function_run_prompt",
  "n function_run_line",
  "a pr prompt_previous",
  "n list_reverse",
  "n list_copy_reverse",
  "i list_copy_reverse",
  "n list_unique_reverse",
  "i list_unique_reverse",
  "n function_current_set",
  "i function_open",
  "a fcs function_current_set",
  "mc function_transform",
  "n function_identifier_replace",
  "c js_identifiers_names js_identifiers",
  "fcs function_identifier_replace",
  "mc js_identifiers",
  "mc each",
  "f function_identifier_replace",
  "n js_identifiers_named",
  "i js_identifiers_named",
  "n object_replace",
  "n object_properties_delete",
  "i object_properties_delete",
  "i object_replace",
  "c",
  "import {assert} from 'console';",
  "i import {assert} from 'console';",
  "i function_identifier_replace",
  "fcs function_param_new",
  "function_identifier_replace lambda ast=>{}",
  "s format",
  "f function_param_new",
  "ac f fm",
  "ac fc f",
  "ac fcs fs",
  "mc js_declaration",
  "o pr",
  "n object_invert",
  "c object_invert each_object",
  "i each_object",
  "i object_invert",
  "n function_aliases_inverted",
  "i function_aliases_inverted",
  "a ai function_aliases_inverted",
  "prompt_previous",
  "ppr",
  "ac p np",
  "pr prompt_previous",
  "f prompt_previous",
  "fm prompt_previous",
  "o fm",
  "i file_js_unparse",
  "pr",
  "n data_prompts",
  "i data_prompts",
  "a ps data_prompts",
  "ac pr p",
  "fs function_param_new",
  "mc js_declaration_single",
  "function_param_new function_dependencies",
  "a pn function_param_new",
  "fs function_dependencies",
  "a fd function_dependencies",
  "fd fd",
  "n function_imports",
  "i function_imports",
  "i fd",
  "c visit visit_async",
  "c visit_filter visit_filter_async",
  "c visit_filter_recursive visit_filter_recursive_async",
  "i visit_filter_recursive_async",
  "i visit_filter_async",
  "n visit_unique_async",
  "u p",
  "i visit_async",
  "i visit_unique_async",
  "i function_dependencies",
  "function_dependencies function_dependencies",
  "n function_dependencies_code",
  "n list_wait",
  "i functions_format",
  "o function_dependencies_code",
  "i function_dependencies_code",
  "function_dependencies_code",
  "i function_dependencies_code ",
  "function_dependencies_code function_dependencies_code",
  "ni clipboardy",
  "n clipboard_copy",
  "n function_dependencies_code_copy",
  "s clipboard",
  "i function_dependencies_code_copy",
  "u ac",
  "a ad function_alias_delete",
  "c function_alias_change function_alias_replace",
  "a ar function_alias_replace",
  "a fd function_dependencies_code_copy",
  "ar fd function_dependencies_code_copy",
  "c noop noop2",
  "fd function_copy",
  "ifunction_name_to_path",
  "function_name_to_path",
  "c np noop2",
  "c file_overwrite file_delete",
  "c function_new function_delete",
  "i function_delete",
  "a de function_delete",
  "o i",
  "n function_auto",
  "a ir function_identifier_replace",
  "fs function_auto ",
  "ir lambda ast=>{}",
  "n js_outside_move",
  "i function_auto",
  "a au function_auto",
  "fm js_outside_move",
  "f js_outside_move",
  "mc each_async",
  "ir lambda fd=>{}",
  "n js_code_export",
  "n js_declaration_name",
  "i js_declaration_name",
  "i js_imports_missing",
  "n function_new_declaration",
  "js_code_export a",
  "i function_new_declaration",
  "function_auto function_auto",
  "c list_map_property list_filter_property",
  "i list_filter_property",
  "s function_auto_test",
  "au au",
  "de function_auto_test",
  "n string_split",
  "n list_all",
  "i list_all",
  "i functions_search",
  "s ht,n",
  "n function_new_js",
  "i function_new",
  "i function_new_js",
  "s slice",
  "c string_slice list_slice",
  "d param",
  "au function_param_new",
  "i mc",
  "ir name f_name",
  "o ir",
  "n function_wrap",
  "pn f_name",
  "pn f_name_wrapped",
  "au function_new_js",
  "n function_name_combine",
  "a fw function_wrap",
  "u pn",
  "i function_wrap",
  "de function_params_new",
  "fw function_param_new function_params_new",
  "n sandbox",
  "i sandbox",
  "a sb sandbox",
  "au sb",
  "fw file_exists function_exists",
  "i function_exists",
  "au function_run_git",
  "au function_run_line",
  "c function_run_line function_run_line_git",
  "s prompt",
  "i function_run_prompt",
  "i function_delete_if_exists",
  "function_exists function_params_new",
  "o function_params_new",
  "i function_param_new",
  "i function_params_new",
  "a psn function_params_new",
  "fs function_name_combine",
  "psn left,right",
  "fm function_name_combine",
  "au function_name_combine",
  "u ir",
  "fw function_identifier_replace function_identifier_replace_suffix",
  "de function_identifier_replace_suffix",
  "fw function_identifier_replace function_identifier_replace_suffix_add",
  "i function_identifier_replace_suffix_add",
  "a irs function_identifier_replace_suffix_add",
  "irs f_name unprefixed",
  "au data_prompts",
  "i ps",
  "fm js_stack_declaration_asyncify",
  "o ps",
  "n js_return_name",
  "au function_wrap",
  "au mc",
  "au ast",
  "au js_return_name",
  "fw function_transform function_transform_command",
  "i function_transform_command",
  "a ftc function_transform_command",
  "fs js_return_name",
  "s names",
  "i js_return_name",
  "ftc js_return_name js_return_name",
  "i marker_call",
  "mc function_name_combine",
  "ir right f_name_unprefixed",
  "ir left \"js\"",
  "c marker_assign_replace marker_call_replace",
  "tf AwaitExpression",
  "marker_call_replace",
  "marker_call_replace 1",
  "a mr marker_call_replace",
  "a mcr marker_call_replace",
  "mcr 0",
  "mcr 0 combined",
  "c mcr marker_next_delete",
  "ir body2 body",
  "au list_remove",
  "i marker_next_delete",
  "a md marker_next_delete",
  "u mr",
  "a mnd marker_next_delete",
  "mc n",
  "mc ft",
  "ir f_name combined",
  "mnd",
  "o irs",
  "c function_identifier_replace_suffix_add",
  "c function_identifier_replace_suffix_add function_identifier_replace_suffix_remove",
  "de function_identifier_replace_suffix_remove",
  "c function_identifier_replace_suffix_add function_identifier_replace_ending_remove",
  "ir suffix_to_add ending_to_remove",
  "n js_atomize",
  "pn as",
  "o pn",
  "pn ast",
  "ir ast2 ast",
  "s filter",
  "fw object_merge object_copy",
  "au js_stack_declaration_asyncify",
  "i function_run_line",
  "au marker_next_index",
  "au marker_call",
  "i list_index_of",
  "ftc js_atomize js_atomize",
  "au marker_assign_replace",
  "u ftc",
  "fw function_transform_command function_transform_command_self",
  "a fts function_transform_command_self",
  "fts js_atomize",
  "i au",
  "ts CallExpression",
  "tf CallExpression",
  "au function_identifier_replace_ending_remove",
  "integer_to a",
  "fs function_identifier_replace_ending_remove",
  "mcr c string_suffix_without",
  "ir combined removed",
  "a ire function_identifier_replace_ending_remove",
  "ire lambda2 2",
  "marker_down 0",
  "fs function_new_js",
  "cd 0",
  "au marker_down",
  "i md",
  "s list,next",
  "i marker_down",
  "s g",
  "o function_new_js",
  "mc js_declaration_single_params_add",
  "mcr 1 ['ast']",
  "i js_atomize",
  "au md",
  "mc js_type",
  "ir node_type 'Identifier'",
  "md 4",
  "ac mn mx",
  "c marker_next marker_new",
  "s call,ex",
  "s code,call",
  "a mn marker_new",
  "s delim",
  "c function_current_set marker_current_set",
  "fs js_atomize",
  "s arg",
  "c marker_call_replace marker_call_atomize",
  "i marker_call_replace",
  "au marker_call_replace",
  "o js_node_atomize",
  "de js_node_tomize",
  "au js_atomize",
  "fm js_node_atomize",
  "s marker,next",
  "au marker_call_atomize",
  "i marker_call_atomize",
  "a mca marker_call_atomize",
  "mca 1",
  "c mx marker_expand",
  "i js_node_atomize",
  "de js_statement_call_get",
  "au marker_call_replace_generic",
  "s blody",
  "au js_declaration_single_block_blody",
  "au js_declaration_params_names",
  "fw js_node_type_is js_identifier_is",
  "i js_identifiers_to_names",
  "fw each each_index",
  "i each_pair",
  "s identifier",
  "s inter",
  "s copy",
  "o marker_expand",
  "au marker_expand",
  "a x marker_expand",
  "i marker_expand",
  "ni astring",
  "i prompt_previous",
  "au marker_new",
  "i marker_top",
  "i marker_new",
  "a ms marker_current_set",
  "au marker_top",
  "au data_function_current_get",
  "mc",
  "ms",
  "o ms",
  "o f",
  "c data_function_current_get data_marker_get",
  "de data_marker_get",
  "c data_function_current_get data_marker_current_get",
  "o data_marker_current_get",
  "ali",
  "ai",
  "u al",
  "fw function_aliases function_aliases_search",
  "al",
  "au function_aliases_search",
  "au functions_search",
  "au search_generic",
  "i function_aliases_search",
  "a as function_aliases_search",
  "a mg data_marker_current_get",
  "c function_transform_marker marker_move",
  "a mm marker_move",
  "o mx",
  "i function_transform_marker",
  "au function_transform_marker",
  "i marker_move",
  "mm 1 2",
  "mm 2 1",
  "c marker_move marker_functionize",
  "au marker_move",
  "o list_index_of_",
  "o list_index_of_next",
  "au list_index_of_next",
  "c list_index_of_next list_index_of_previous",
  "i marker_previous_index",
  "c marker_next_index marker_previous_index",
  "fw list_slice list_range",
  "mf marker_functionize",
  "a mf marker_functionize",
  "s js,node,type",
  "au function_types",
  "fw js_node_types js_node_types_includes",
  "i js_node_types_includes",
  "s any",
  "c list_all list_any",
  "i list_any",
  "fs marker_functionize",
  "s declarat",
  "c list_add list_add_multiple",
  "mf 1 2",
  "",
  "au export function js_stack_last(stack, type) {",
  "au js_stack_last",
  "s range",
  "n range",
  "fm range",
  "fw each each_range",
  "i each_range",
  "i list_next_index",
  "o list_adder",
  "au list_adder",
  "c list_adder list_adder_multiple",
  "fs html_new ",
  "au marker_functionize",
  "s declaration",
  "i marker_functionize",
  "fs html_new4",
  "i function_current_set",
  "c function_transform_marker function_transform_marker_all",
  "i function_transform_marker_all",
  "i marker_remove",
  "o function_transform_marker",
  "au function_transform_marker_all",
  "i function_transform",
  "i html_new",
  "ms 1",
  "s html",
  "i js_outside_move",
  "de export async function html_overwrite(name, body, file_path) {",
  "de html_overwrite",
  "u f",
  "c function_params_new function_param_move",
  "au function_params_new",
  "i function_param_move",
  "fw list_map list_map_index",
  "fw list_filter list_find",
  "fw list_find list_find_property",
  "s property",
  "au list_filter_property",
  "i list_find_property",
  "au function_param_swap",
  "n list_swap",
  "s insert",
  "au list_insert",
  "c list_insert list_replace",
  "i list_swap",
  "i js_declaration_param_named",
  "function_param_swap body file_path",
  "i function_param_swap",
  "function_param_swap html_overwrite body file_path",
  "au html_new",
  "i html_overwrite",
  "ni chokidar",
  "n watch",
  "n import_install",
  "import_install chokidar",
  "import_install chokdiar",
  "u ni",
  "i import_install",
  "s src",
  "s public",
  "a w watch",
  "fw fw function_wrap_suffix_add",
  "fw fws function_wrap_suffix_add",
  "a fws function_wrap_suffix_add",
  "fw au path",
  "de path",
  "de au_path",
  "o fws",
  "i function_wrap_suffix_add",
  "fws au path",
  "s path,name",
  "s path",
  "i folder_read",
  "i function_import",
  "i function_name_to_path",
  "n path_name",
  "i function_auto_path",
  "function_auto_path src/noop.mjs",
  "au function_auto_path",
  "i watch",
  "o mn",
  "n string_to",
  "s push",
  "au git_push",
  "s ex",
  "au marker_first",
  "u nj",
  "s js",
  "s js,new",
  "a nj function_new_js",
  "nj return_atomize",
  "c js_return_on js_return_on_async",
  "ftc marker_first js_return_atomize",
  "s expa",
  "de js_declarator_init_set",
  "s init",
  "s uniqu",
  "fs marker_top",
  "mr",
  "o mr",
  "o md",
  "u mb",
  "c md marker_bottom",
  "a mb marker_bottom",
  "n list_last_is",
  "ms 2",
  "mb",
  "c log log_keep",
  "o log",
  "nj if_else_if_combine",
  "o function_run",
  "s swap",
  "s json",
  "c json_to json_format_to",
  "s run,log",
  "s s",
  "nj calls_to_each",
  "nj call_fill",
  "np",
  "o mf",
  "nj dollar",
  "tf ExpressionStatement",
  "n equal_by",
  "c assert assert_message",
  "w",
  "c catch_log catch_log_async",
  "s eq",
  "s prefix",
  "c string_suffix_without string_prefix_without",
  "s start",
  "si git_acp_call",
  "fd git_acp_call",
  "n identity",
  "i catch_only_async",
  "fd git_commit",
  "fs marker_call",
  "mf 1 2 js_call_new",
  "sgit",
  "fd git_acp",
  "fd js_call_fill",
  "s ignore",
  "i js_unparse",
  "s visit,async",
  "n js_visit_type_each_async",
  "s dec,name",
  "nj declare_assign_null",
  "nj await_add",
  "fd js_unparse",
  "nj import_inside",
  "o ftc",
  "s import",
  "ftc js_imports js_import_inside",
  "o js_type",
  "js_visit_filter n",
  "ftd js_await_add",
  "s function,trans",
  "fts js_await_add",
  "ftc js_await_add js_unparse_inner",
  "n task_new",
  "s funct,new",
  "u s",
  "n function_new_aliased",
  "u a",
  "a na function_new_aliased",
  "s search",
  "na functions_search_open so",
  "o so",
  "so fill",
  "s body",
  "as v",
  "as task_new",
  "a t task_new",
  "de js_call_fill_test",
  "de",
  "f_name_task",
  "t test",
  "s test",
  "de js_call_fill_test_test",
  "de js_call_fill_test_test_test",
  "de js_call_fill_test_test_test_test",
  "de js_call_fill_test_test_test_test_test",
  "n function_name_combine_multiple",
  "na tasks_run tr",
  "o s",
  "s task_",
  "s prop",
  "a op object_properties",
  "a ea each_async",
  "s function",
  "s task",
  "s _task_",
  "fts js_declare_assign_null",
  "fs function_param_swap",
  "t simple",
  "tr",
  "nj let_add",
  "u",
  "fw t task_new_simple",
  "fs js_let_add",
  "a tns task_new_simple",
  "tns",
  "a nti js_node_type_is",
  "a sei string_empty_is",
  "a lf list_first",
  "s seco",
  "c list_first list_second",
  "a ls list_second",
  "de list_skip",
  "c string_skip list_skip",
  "s string",
  "so dollar",
  "a or object_replace",
  "s define",
  "fs js_identifier_defineds",
  "tf ArrowFunctionExpression",
  "nj arrow_to_function",
  "a st object_property_set",
  "c js_arrow_to_function js_arrow_blockify",
  "s js_node_type",
  "a ntn js_node_type_not_is",
  "u g",
  "s get",
  "s identi",
  "a oc object_copy",
  "o ts",
  "ft FunctionDeclaration",
  "c js_arrow_to_function js_function_id_add",
  "fs js_function_id_add",
  "s atomi",
  "c js_atomize js_atomize_function",
  "s id,name",
  "fs function_run_log",
  "t duplicate_lines_to_each",
  "a jpe js_parse_expression",
  "fts js_atomize_function",
  "de js_dollar_task_each_code_own_fn_task_if_else_to_generic",
  "fs js_dollar",
  "t each_code_own_fn",
  "t if_else_to_generic",
  "s current,set",
  "nj params_consolidate",
  "n function_params_consolidate",
  "de js_params_consolidate",
  "as exist",
  "s exist",
  "s before",
  "s previous",
  "a lg list_get",
  "u st",
  "fs js_declaration_param_add",
  "mf 1 2 js_declaration_params_get",
  "s js_dollar_g",
  "ts js_dollar_g",
  "fs js_dollar_g",
  "tf FunctionDeclaration",
  "tf Property",
  "fs function_params_consolidate",
  "s list,clear",
  "s clear",
  "s list",
  "n list_empty",
  "function_params_consolidate js_dollar_g",
  "s transform",
  "a fns function_names",
  "a fns functions_names",
  "ac fns functions_names",
  "o ac",
  "ac functions_names fns",
  "ar fns functions_names",
  "s functions_names",
  "a e each",
  "a l1 list_get_end_1",
  "c js_stack_filtered js_stack_filtered_multiple",
  "a la list_adder",
  "a lal list_all",
  "s atomize",
  "fw string_is",
  "fw string_is string_is_assert",
  "c js_stack_last js_stack_last_multiple",
  "a l2 list_get_end_2",
  "u l2",
  "ftc js_declare_assign_null e",
  "c data_function_current_get data_watch_get",
  "c function_current_set data_watch_set",
  "fs au",
  "t arrow_to_function_should_add_return",
  "s arrow",
  "de au_task_arrow_to_function_should_add_return",
  "o t",
  "a fnu function_name_unalias",
  "fs data_watch_set",
  "t add_return",
  "o e",
  "s next",
  "a li list_is",
  "ac li lin",
  "a li list_includes",
  "ar li list_is",
  "a log l",
  "s alias",
  "as alias",
  "ad log",
  "a l log",
  "o a",
  "s sort",
  "fw list_sort_string list_sort_string_mapper",
  "de list_sort_string_mapper",
  "c list_sort_string list_sort_number_mapper",
  "o list_sort_string",
  "a test t",
  "a test ttt",
  "ttt",
  "ad ttt",
  "fd list_sort_string_size",
  "a test tt",
  "tt",
  "ad tt",
  "a at assert",
  "s nodes",
  "s name",
  "ftc js_dollar export function js_identifier_defineds(v) {",
  "ftc js_dollar js_identifier_defineds",
  "as list",
  "ac la ld",
  "a la list_add",
  "s invo",
  "s lamb",
  "n lambda_invoke",
  "s stack",
  "s function,type",
  "s assert",
  "s param",
  "fts js_let_add",
  "n functions_combine",
  "s split",
  "a ss string_split",
  "a ssc string_split_comma",
  "s fun,new",
  "sa function_new_transform ",
  "as function_new_transform",
  "a fnt function_new_transform",
  "s combine",
  "s call",
  "u jsp",
  "s parse",
  "a jps js_parse_statement",
  "a fc functions_combine",
  "fc fs t",
  "lm",
  "a lm list_map",
  "s list,map",
  "a lmu list_map_unordered_async",
  "s fill",
  "u fnu",
  "de function_current_set_task_new",
  "fc fs,t",
  "de fs_t",
  "s fil",
  "s let",
  "s sand",
  "lmp",
  "a lmp list_map_property",
  "s unalias",
  "fst function_alias_add_generic unalias_from_acronyms",
  "sb",
  "a fst function_current_set_task_new",
  "n function_name_to_acronym",
  "s separ",
  "a fsp function_name_separator",
  "s part",
  "s first",
  "function_name_to_acronym function_name_to_acronym",
  "n function_names_to_acronyms",
  "s lookup",
  "s dict",
  "s object",
  "n list_to_dictionary",
  "so doll",
  "s ac",
  "s invert",
  "function_names_to_acronyms",
  "n git_push_schedule",
  "n path_resolve",
  "jis",
  "s acro",
  "n function_acronym_to_names",
  "a atn function_acronym_to_names",
  "atn ii",
  "atn jis",
  "path_resolve .",
  "s folder",
  "a ii import_install",
  "git_push_schedule",
  "fw c function_copy_suffix_add",
  "u cs",
  "a cs function_copy_suffix_add",
  "cs git_push_schedule check",
  "f ",
  "fs git_push_schedule_check",
  "git_push_schedule_check",
  "schtasks_query t",
  "s schedule",
  "as err",
  "git_push_schedule_command",
  "fd git_push_schedule_command",
  "o fd",
  "s unique",
  "cs list_adder_unique async",
  "fd git_push_schedule",
  "o command_line_schtasks ",
  "s end",
  "n js_declaration_params_names",
  "n js_declaration_params_names_node",
  "nj dollar_s",
  "s size,assert",
  "n list_squash",
  "a er error",
  "s statement",
  "nj dollar_f",
  "s parent",
  "s code,fn",
  "s code,fun",
  "s function,ke",
  "s assign",
  "s null",
  "fst function_params_consolidate simple",
  "fw fst",
  "s wrap",
  "as wrap",
  "fws fst simple",
  "a fsts function_current_set_task_new_simple",
  "fsts js_await_add",
  "fsts function_param_swap",
  "fsts js_import_inside",
  "fsts js_calls_to_each",
  "s else",
  "s visit",
  "s replace",
  "as replace",
  "o ire",
  "fs js_if_else_if_combine",
  "ir type 'IfStatement'",
  "fws nti if",
  "u nt",
  "ac nti nt",
  "u n",
  "u t",
  "a nti js_node_type_is_if",
  "c js_node_type_is_if js_node_type_is_if_async ",
  "s equal",
  "u eb",
  "o cs",
  "de eb_async",
  "cs eb async",
  "o eb",
  "s left",
  "ftc js_if_else_if_combine marker_down_generic",
  "i js_auto",
  "mf html_overwrite",
  "mf 1 2 html_overwrite",
  "o html_overwrite",
  "fs html_new",
  "mf 1 2 html_update",
  "s brace",
  "i function_imports_add",
  "au function_imports_add",
  "ftc js_outside_move function_imports_add",
  "i folder_current_join",
  "s async",
  "mt",
  "u mt",
  "fs js_await_add",
  "o data_all",
  "da",
  "u ds",
  "o ds",
  "s read",
  "a function_read fr",
  "o fr",
  "s unal",
  "fr fr",
  "s dec",
  "fr fpd",
  "add jesus christ",
  "string_to jesus",
  "js_parse 'a'",
  "de data_property_new",
  "n data_property_new",
  "o n",
  "fr o",
  "u fo",
  "fs file_open",
  "fr file_open",
  "js_parse 1",
  "o file_open",
  "s open",
  "s await",
  "s declar",
  "fc function_parse_declaration,ju",
  "cs function_open editor",
  "s function_open_editor",
  "a oe   await function_current_set(f_name);",
  "ar oe function_open_editor",
  "a oe function_open_editor",
  "a fp function_parse_declaration_js_unparse",
  "oe js_await_add",
  "u fn",
  "u fns",
  "oe function_parse_declaration_js_unparse",
  "oe mc",
  "u ls",
  "oe list_single",
  "u fr",
  "mc jvt",
  "fr jaa",
  "sa declar",
  "as declar",
  "ire ast2 2",
  "s watch",
  "oe dwg",
  "c dwg data_editor_get",
  "s ext",
  "de data_editor_get",
  "c dwg data_terminal_get",
  "u dws",
  "oe dws",
  "oe fws",
  "oe c",
  "s run",
  " fd ii",
  "fd ii",
  "fp dts",
  "as marker",
  "ma \"terminal\"",
  "fw ar marker_assign_replace_string",
  "u ar",
  "de marker_assign_replace_string",
  " u u",
  "u u",
  "fw mar marker_assign_replace_string",
  "o fw",
  "fe fw",
  "oe fw",
  "oe mars",
  "s code,str",
  "oe u",
  "u jcs",
  "oe marker_assign_replace_string",
  "fp data_terminal_get",
  "fw fp function_current_declaration_code",
  "fw oe function_open_editor_current",
  "oe function_open_editor_current",
  "s current,get",
  "a oc function_open_editor_current",
  "a oec function_open_editor_current",
  "oe function_current_declaration_code",
  "a cd function_current_declaration_code",
  "fs data_terminal_get",
  "a ars marker_assign_replace_string",
  "o m",
  "fs dtg",
  "oe m",
  "fs m",
  "fp data_watch_set",
  "c dws data_terminal_set",
  "fs dts",
  "ars terminal",
  "oe ft",
  "s function_run",
  "fc",
  "as current",
  "fp jaa",
  "ir type \"CallExpression\"",
  "oe ir",
  "s current",
  "c marker_down_generic marker_down_choices",
  "a mdc marker_down_choices",
  "dts 1",
  "dtg",
  "o o",
  "fs",
  "oe o",
  "o jaa",
  "o p",
  "o fs",
  "u fs",
  "c marker_down_choices function_transform_marker_empty",
  "function_transform_marker_empty",
  "fd",
  "m",
  "oe md",
  "oe fc",
  "1p",
  "fc mr m",
  "fcn mr,m",
  "de marker_remove_marker_top",
  "a lz list_size",
  "md -2",
  "n list_to",
  "fc mr,m",
  "a mrt marker_remove_marker_top",
  "jaa",
  "me 1",
  "oe mdc",
  "fs marker_down_choices_lambda",
  "x",
  "md 3",
  "o mb",
  "oe mb",
  "md c",
  "mn",
  "as mark",
  "oe mrt",
  "cs list_size_1_assert message",
  "s size,1",
  "oe ms",
  "oe fs",
  "mg",
  "n list_map_property_to",
  "oe list_map_property_to",
  "md 2",
  "mdc",
  "md 0",
  "oe marker_down_choices_lambda",
  "mrt",
  "md 1",
  "md -1",
  "nj marker_enter",
  "s marker",
  "fws function_transform_marker current",
  "u fts",
  "s function,types",
  "u ft",
  "a fy function_types",
  "s find",
  "s skip",
  "a lk list_skip",
  "s index,next",
  "a ll list_filter",
  "u jnt",
  "a jnt js_node_type",
  "s marker,ne",
  "s type,js",
  "c js_visit_type js_visit_types",
  "ftc js_marker_enter js_marker_enter",
  "s types",
  "fts jme",
  "fw jv js_visitors",
  "oec",
  "dts 0",
  "nj block_child_graph",
  "s last",
  "cs string_is_assert message",
  "ftc jbcg",
  "s string,assert",
  "oe opg",
  "s mult",
  "i list_first_second",
  "s empty",
  "n list_last_or_null",
  "oe ftc",
  "oe fts",
  "n null_not_is",
  "u lio",
  "a lx list_index_of",
  "s list,index",
  "n list_index_is",
  "s doll",
  "c js_dollar_r js_dollar_rt",
  "c js_dollar_rt js_dollar_rf",
  "s equ",
  "fws equal not",
  "n exit",
  "ac x me",
  "a x exit",
  "s assert,inte",
  "s asser,num",
  "s inte",
  "n integer_is",
  "u ii",
  "a ini integer_is",
  "o au",
  "nj if_blockify",
  "s return",
  "s visit,type",
  "s each",
  "u lu",
  "a lu log_unparse",
  "s function,js",
  "as node,type",
  "u jnti",
  "a ntsi js_node_types_is",
  "cs js_block_child_graph unparse",
  "u ju",
  "u lmua",
  "fs sb",
  "ftc jbcgu sb",
  "ob",
  "o sb",
  "f_name",
  "s size",
  "nj bang_to_not",
  "u jv",
  "a jv js_visit",
  "ts",
  "s js,type",
  "a jvt js_visit_type",
  "o mc",
  "nj js_dollar_ie",
  "de js_js_dollar_ie",
  "nj dollar_ie",
  "fs js_call_new",
  "mf 1 2 js_call_new_code",
  "s js_visit_type",
  "n not",
  "s js,call",
  "s js_keyword_arguments",
  "fts jbtn",
  "s au",
  "s js_block_child_graph",
  "s atom",
  "s dollar",
  "o ",
  "o js_atomize_function",
  "s auto",
  "s visit,each",
  "s js,visit",
  "c js_visit_each_async js_visit_each",
  "fts js_block_child_graph_unparse",
  "fw list_is list_not_is",
  "fts jbcg",
  "f",
  "o jbcgu",
  "ftc jbcgu",
  "fts jbcgu",
  "      }",
  "s me",
  "u me",
  "s enter",
  "n function_rename",
  "u fc",
  "a fcp function_copy",
  "a r function_rename",
  "r js_marker_enter marker_enter",
  "ac me mx",
  "a me marker_enter",
  "u lr",
  "a lr list_remove",
  "s list,add",
  "s block",
  "me",
  "n marker_above",
  "s marker,index",
  "c marker_previous_index marker_index",
  "as insert",
  "u li",
  "u lis",
  "a lis list_insert",
  "a ma marker_above",
  "a mab marker_above",
  "c mab marker_delete_above",
  "s prev",
  "cd",
  "fs jaa",
  "a mda marker_delete_above",
  "mda",
  "u ja",
  "a ja js_auto",
  "mab $g$v$stack",
  "s functions",
  "s function,write",
  "s write",
  "s file_js_unparse",
  "fw data_transform data_identifiers_file",
  "s ident",
  "s list,if,not",
  "a lax list_add_if_not_includes",
  "s file_js",
  "s path_To",
  "s path_to",
  "data_property_get identifiers",
  "s join",
  "u lj",
  "a lj list_join",
  "n data_file_update",
  "de data_identifiers_file",
  "s remove",
  "dpg dfu",
  "data_property_get data_file_update",
  "p",
  "dpg functions",
  "s delete",
  "a opd object_property_delete",
  "  let x = null;",
  "ps",
  "dpg identifiers",
  "s catch",
  "s data",
  "s git",
  "c chalk_green chalk_red",
  "s data,udpate",
  "s update",
  "o w",
  "c fws function_watch_suffix_change",
  "r function_watch_suffix_change function_watch_ending_change",
  "s suffix"
 ],
 "marker_current": "1",
 "function_current": "function_watch_ending_change",
 "terminal": false,
 "identifiers": {
  "log": [
   "data_identifiers_file",
   "file_js_unparse",
   "watch",
   "function_run_prompt"
  ],
  "function_path_to_name": [
   "data_identifiers_file",
   "function_auto_path",
   "data_file_update"
  ],
  "list_add_if_not_includes": [
   "data_identifiers_file",
   "data_file_update"
  ],
  "object_property_initialize": [
   "data_identifiers_file",
   "data_file_update"
  ],
  "each": [
   "data_identifiers_file",
   "data_file_update"
  ],
  "js_identifiers_names": [
   "data_identifiers_file",
   "data_file_update"
  ],
  "data_transform": [
   "data_identifiers_file",
   "data_file_update",
   "watch",
   "function_run_prompt",
   "error_attention_set"
  ],
  "marker": [
   "data_identifiers_file",
   "watch",
   "data_file_update",
   "chalk_red",
   "function_watch_suffix_change",
   "function_watch_ending_change"
  ],
  "data_identifiers_file": [
   "data_identifiers_file",
   "file_js_unparse"
  ],
  "parsed": [
   "data_identifiers_file",
   "file_js_unparse",
   "file_js_parse",
   "data_file_update"
  ],
  "f_path": [
   "data_identifiers_file",
   "file_js_unparse",
   "data_file_update",
   "file_js_parse"
  ],
  "ast": [
   "data_identifiers_file",
   "file_js_unparse",
   "file_js_parse",
   "data_file_update"
  ],
  "code": [
   "data_identifiers_file",
   "file_js_unparse",
   "file_js_parse",
   "data_file_update"
  ],
  "f_name": [
   "data_identifiers_file",
   "watch",
   "function_auto_path",
   "data_file_update",
   "function_watch_suffix_change",
   "function_watch_ending_change"
  ],
  "property_name": [
   "data_identifiers_file",
   "data_file_update"
  ],
  "lambda": [
   "data_identifiers_file",
   "watch",
   "data_file_update"
  ],
  "previous": [
   "data_identifiers_file",
   "data_file_update",
   "error_attention_set"
  ],
  "i_names": [
   "data_identifiers_file",
   "data_file_update"
  ],
  "lambda2": [
   "data_identifiers_file",
   "watch",
   "data_file_update"
  ],
  "i_name": [
   "data_identifiers_file",
   "data_file_update"
  ],
  "list": [
   "data_identifiers_file",
   "watch",
   "data_file_update"
  ],
  "v": [
   "data_identifiers_file",
   "file_js_unparse",
   "function_auto_path",
   "data_file_update",
   "chalk_green",
   "function_watch_suffix_change",
   "function_watch_ending_change"
  ],
  "file_overwrite": [
   "file_js_unparse"
  ],
  "js_unparse": [
   "file_js_unparse"
  ],
  "js_format": [
   "file_js_unparse"
  ],
  "file_js_unparse": [
   "file_js_unparse"
  ],
  "code_unparsed": [
   "file_js_unparse"
  ],
  "code_new": [
   "file_js_unparse"
  ],
  "message": [
   "file_js_unparse"
  ],
  "object_property_exists_equals": [
   "watch"
  ],
  "catch_log_async": [
   "watch"
  ],
  "git_acp_call": [
   "watch"
  ],
  "catch_log": [
   "watch"
  ],
  "catch_ignore": [
   "watch"
  ],
  "function_auto_path": [
   "watch",
   "function_auto_path"
  ],
  "functions_path": [
   "watch"
  ],
  "import_install": [
   "watch",
   "function_run_prompt",
   "chalk_green",
   "chalk_red",
   "chalk_color"
  ],
  "command_line": [
   "watch"
  ],
  "log_keep": [
   "watch",
   "function_run_prompt"
  ],
  "object_property_exists": [
   "watch"
  ],
  "object_property_equals": [
   "watch"
  ],
  "object_property_set": [
   "watch",
   "data_file_update"
  ],
  "watch": [
   "watch"
  ],
  "chokidar": [
   "watch"
  ],
  "default": [
   "watch",
   "chalk_color"
  ],
  "joined": [
   "watch"
  ],
  "watcher": [
   "watch"
  ],
  "persistent": [
   "watch"
  ],
  "ignoreInitial": [
   "watch"
  ],
  "in_progress": [
   "watch"
  ],
  "on": [
   "watch"
  ],
  "path": [
   "watch"
  ],
  "value": [
   "watch",
   "error_attention_set"
  ],
  "name": [
   "watch"
  ],
  "output": [
   "watch"
  ],
  "args": [
   "watch"
  ],
  "lj": [
   "watch"
  ],
  "list_join": [
   "watch"
  ],
  "result": [
   "watch",
   "data_file_update"
  ],
  "separator": [
   "watch"
  ],
  "list_join_space": [
   "watch"
  ],
  "command_line_node_g": [
   "watch"
  ],
  "$ag": [
   "watch"
  ],
  "path_name": [
   "function_auto_path"
  ],
  "function_auto": [
   "function_auto_path"
  ],
  "data_file_update": [
   "data_file_update",
   "watch"
  ],
  "file_js_parse": [
   "data_file_update",
   "file_js_parse"
  ],
  "f_path2": [
   "data_file_update"
  ],
  "file_read": [
   "file_js_parse"
  ],
  "js_parse": [
   "file_js_parse"
  ],
  "data_all": [
   "data_file_update"
  ],
  "d": [
   "data_file_update"
  ],
  "data": [
   "data_file_update"
  ],
  "file_path": [
   "data_file_update"
  ],
  "object_property_get": [
   "data_file_update",
   "chalk_green",
   "chalk_red",
   "chalk_color"
  ],
  "data_save": [
   "data_file_update"
  ],
  "identifiers": [
   "data_file_update"
  ],
  "functions": [
   "data_file_update"
  ],
  "f_this": [
   "data_file_update"
  ],
  "list_difference": [
   "data_file_update"
  ],
  "f_identifiers_new": [
   "data_file_update"
  ],
  "f_identifiers_old": [
   "data_file_update"
  ],
  "removals": [
   "data_file_update"
  ],
  "item": [
   "data_file_update"
  ],
  "list_includes": [
   "data_file_update"
  ],
  "list_remove": [
   "data_file_update"
  ],
  "list_remove_all": [
   "data_file_update"
  ],
  "list_empty_is": [
   "data_file_update"
  ],
  "e": [
   "data_file_update"
  ],
  "object_property_delete": [
   "data_file_update"
  ],
  "data_boolean_set": [
   "watch"
  ],
  "function_name_combine": [
   "watch",
   "function_watch_suffix_change",
   "function_watch_ending_change"
  ],
  "error_attention_set": [
   "watch",
   "error_attention_set"
  ],
  "data_property_get": [
   "function_run_prompt"
  ],
  "trinity_green": [
   "function_run_prompt"
  ],
  "chalk_green": [
   "function_run_prompt",
   "chalk_green"
  ],
  "function_run_line_git": [
   "function_run_prompt"
  ],
  "function_run_line": [
   "function_run_prompt"
  ],
  "command_line_read": [
   "function_run_prompt"
  ],
  "function_run_git": [
   "function_run_prompt"
  ],
  "list_add": [
   "function_run_prompt"
  ],
  "list_unique": [
   "function_run_prompt"
  ],
  "function_run_prompt": [
   "function_run_prompt"
  ],
  "prompt_colored": [
   "function_run_prompt"
  ],
  "line": [
   "function_run_prompt"
  ],
  "ea": [
   "function_run_prompt"
  ],
  "nn": [
   "function_run_prompt"
  ],
  "null_not_is": [
   "function_run_prompt"
  ],
  "prompt": [
   "chalk_green",
   "chalk_red",
   "function_run_prompt",
   "chalk_color"
  ],
  "color": [
   "chalk_green",
   "chalk_red",
   "chalk_color"
  ],
  "chalk_color": [
   "chalk_green",
   "chalk_red",
   "chalk_color"
  ],
  "chalk_red": [
   "chalk_red",
   "function_run_prompt"
  ],
  "chalk": [
   "chalk_color"
  ],
  "fn": [
   "chalk_color"
  ],
  "colored": [
   "chalk_color",
   "chalk_red",
   "function_run_prompt"
  ],
  "lambda3": [
   "error_attention_set"
  ],
  "value2": [
   "error_attention_set"
  ],
  "error": [
   "watch",
   "string_suffix_without"
  ],
  "json_format_to": [
   "function_run_prompt"
  ],
  "function_name_unalias": [
   "function_watch_suffix_change",
   "function_watch_ending_change"
  ],
  "function_wrap": [
   "function_watch_suffix_change",
   "function_watch_ending_change"
  ],
  "function_watch_suffix_change": [
   "function_watch_suffix_change"
  ],
  "suffix": [
   "function_watch_suffix_change",
   "string_suffix_without"
  ],
  "unaliased": [
   "function_watch_suffix_change",
   "function_watch_ending_change"
  ],
  "f_name_wrapped": [
   "function_watch_suffix_change"
  ],
  "function_watch_ending_change": [
   "function_watch_ending_change"
  ],
  "string_suffix_without": [
   "function_watch_ending_change",
   "string_suffix_without"
  ],
  "not": [
   "string_suffix_without"
  ],
  "string_ends_with": [
   "string_suffix_without"
  ],
  "string_slice": [
   "string_suffix_without"
  ],
  "string_size": [
   "string_suffix_without"
  ],
  "s": [
   "string_suffix_without"
  ],
  "a": [
   "string_suffix_without"
  ],
  "without": [
   "string_suffix_without"
  ],
  "ending_old": [
   "function_watch_ending_change"
  ],
  "ending_new": [
   "function_watch_ending_change"
  ],
  "f_name_new": [
   "function_watch_ending_change"
  ],
  "string_suffix_change": [
   "function_watch_ending_change"
  ]
 },
 "functions": {
  "data_file_update": {
   "identifiers": [
    "object_property_delete",
    "list_empty_is",
    "object_property_set",
    "list_remove_all",
    "object_property_get",
    "data_save",
    "data_all",
    "data_transform",
    "each",
    "list_add_if_not_includes",
    "object_property_initialize",
    "js_identifiers_names",
    "file_js_parse",
    "function_path_to_name",
    "marker",
    "list_difference",
    "list_includes",
    "list_remove",
    "data_file_update",
    "f_path",
    "f_name",
    "d",
    "data",
    "parsed",
    "ast",
    "f_identifiers_new",
    "property_name",
    "identifiers",
    "lambda2",
    "i_name",
    "list",
    "functions",
    "f_this",
    "f_identifiers_old",
    "removals",
    "lambda",
    "item",
    "e"
   ]
  },
  "watch": {
   "identifiers": [
    "error",
    "error_attention_set",
    "data_transform",
    "function_name_combine",
    "data_boolean_set",
    "command_line_node_g",
    "list_join_space",
    "list_join",
    "marker",
    "object_property_exists_equals",
    "catch_log_async",
    "git_acp_call",
    "catch_log",
    "catch_ignore",
    "log",
    "function_auto_path",
    "functions_path",
    "import_install",
    "command_line",
    "log_keep",
    "object_property_exists",
    "data_file_update",
    "object_property_set",
    "watch",
    "chokidar",
    "default",
    "joined",
    "watcher",
    "persistent",
    "ignoreInitial",
    "in_progress",
    "lambda2",
    "path",
    "lambda",
    "value",
    "name",
    "f_name",
    "args",
    "on"
   ]
  },
  "function_run_prompt": {
   "identifiers": [
    "chalk_red",
    "null_not_is",
    "data_property_get",
    "trinity_green",
    "chalk_green",
    "import_install",
    "function_run_line_git",
    "function_run_line",
    "log",
    "data_transform",
    "command_line_read",
    "function_run_git",
    "list_add",
    "list_unique",
    "json_format_to",
    "log_keep",
    "function_run_prompt",
    "ea",
    "nn",
    "prompt",
    "colored",
    "prompt_colored",
    "line"
   ]
  },
  "chalk_green": {
   "identifiers": [
    "chalk_color",
    "object_property_get",
    "import_install",
    "chalk_green",
    "prompt",
    "color",
    "v"
   ]
  },
  "chalk_red": {
   "identifiers": [
    "marker",
    "chalk_color",
    "object_property_get",
    "import_install",
    "chalk_red",
    "prompt",
    "color",
    "colored"
   ]
  },
  "chalk_color": {
   "identifiers": [
    "object_property_get",
    "import_install",
    "chalk_color",
    "color",
    "prompt",
    "chalk",
    "default",
    "fn",
    "colored"
   ]
  },
  "error_attention_set": {
   "identifiers": [
    "data_transform",
    "error_attention_set",
    "value",
    "lambda3",
    "previous",
    "value2"
   ]
  },
  "function_watch_suffix_change": {
   "identifiers": [
    "marker",
    "function_name_unalias",
    "function_name_combine",
    "function_wrap",
    "function_watch_suffix_change",
    "f_name",
    "suffix",
    "unaliased",
    "f_name_wrapped",
    "v"
   ]
  },
  "function_watch_ending_change": {
   "identifiers": [
    "string_suffix_change",
    "string_suffix_without",
    "marker",
    "function_name_unalias",
    "function_name_combine",
    "function_wrap",
    "function_watch_ending_change",
    "f_name",
    "ending_old",
    "ending_new",
    "unaliased",
    "f_name_new",
    "v"
   ]
  },
  "string_suffix_without": {
   "identifiers": [
    "not",
    "string_ends_with",
    "error",
    "string_slice",
    "string_size",
    "string_suffix_without",
    "s",
    "suffix",
    "a",
    "without"
   ]
  }
 }
}